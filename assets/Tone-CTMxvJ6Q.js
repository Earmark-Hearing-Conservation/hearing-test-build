const G=globalThis.AudioContext||globalThis?.webkitAudioContext,e=new G,u=e.createOscillator(),l=e.createGain(),n=e.createGain(),r=e.createGain(),g=e.createGain(),m=e.createChannelMerger(2);u.connect(l);l.connect(n);n.connect(r);n.connect(g);r.connect(m,0,0);g.connect(m,0,1);m.connect(e.destination);n.gain.value=0;r.gain.value=0;g.gain.value=0;l.gain.value=0;u.start(e.currentTime+0);const i=.0015,a=(c,t,o)=>c.linearRampToValueAtTime(t,e.currentTime+o),s=(c,t,o)=>{a(c,0,t),a(c,1,t+i),a(c,1,t+o-i),a(c,0,t+o)},h=(c,t,o,T)=>{e.resume(),n.gain.cancelScheduledValues(e.currentTime),n.gain.setValueAtTime(0,e.currentTime),a(r.gain,1-t,i),a(g.gain,t,i),a(u.frequency,o,i),a(l.gain,T,i),c?s(n.gain,.01,.8):(s(n.gain,.01,.2),s(n.gain,.33,.2),s(n.gain,.66,.2))};export{h as Play};
